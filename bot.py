import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message
import time
from bd_config import User,Task, Session
from keyboard import create_main_keyboard

BOT_TOKEN = "6481132072:AAEcFRg5bH9eEgzUXHMdyzOkdTHClDAqrfw"
FLASK_URL = 'https://f6dd-94-231-133-134.ngrok-free.app'
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()


@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    main_kb = create_main_keyboard(user_id, FLASK_URL)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not user_exists(user_id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        save_user(user_id, first_name)
        await message.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!ü§°")
    else:
        await message.reply("–í—ã —É–∂–µ –Ω–∞—à —á–µ–ª!üëå")

    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {first_name}!üòò', reply_markup=main_kb)
    # asyncio.create_task(test(message))


@dp.message()
async def answer(message: Message):
    await message.answer(f"–ó–∞–¥–∞—á–∞ <b>¬´{message.web_app_data.data}¬ª</b> —Å–æ–∑–¥–∞–Ω–∞!")


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notification(user_id, message):
    await bot.send_message(user_id, message)


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
def get_tasks_to_notify(current_datetime):
    session = Session()
    tasks_to_notify = (
        session.query(Task)
        .filter(Task.notification == 1)
        .filter(Task.notify_time <= current_datetime)
        .filter(Task.date_term <= current_datetime)
        .all()
    )
    session.close()
    return tasks_to_notify


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é - —Ä–∞–±–æ—Ç–∞–µ—Ç
async def schedule_notifications():
    while True:
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        current_datetime = time.strftime('%Y-%m-%d %H:%M:%S')

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–∫—É—â–∏–º –º–æ–º–µ–Ω—Ç–æ–º
        tasks_to_notify = get_tasks_to_notify(current_datetime)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for task in tasks_to_notify:
            user_id = task.task_user_id
            task_name = task.task_name
            notification_message = (f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µüö®Ô∏è\n'
                                    f'–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É <b>¬´{task_name}¬ª</b>‚ùó')

            await send_notification(user_id, notification_message)
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–µ —Å–Ω–æ–≤–∞
            mark_task_as_notified(task)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–π
def mark_task_as_notified(task):
    session = Session()
    task.notification = 0
    session.add(task)
    session.commit()
    session.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def user_exists(user_id):
    session = Session()
    user = session.query(User).filter_by(user_id=user_id).first()
    session.close()
    return user is not None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_user(user_id, first_name):
    session = Session()
    new_user = User(user_id=user_id, user_name=first_name)
    session.add(new_user)
    session.commit()
    session.close()


async def main():
    asyncio.create_task(schedule_notifications())
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(main())


